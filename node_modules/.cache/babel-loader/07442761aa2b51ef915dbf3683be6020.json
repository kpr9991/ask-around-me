{"remainingRequest":"C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\vuetify-loader\\lib\\loader.js??ref--18-0!C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\src\\components\\IoT.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\src\\components\\IoT.vue","mtime":1607093321477},{"path":"C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC50by1zdHJpbmciOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICJDOlxcVXNlcnNcXGtwcnV0XFxEZXNrdG9wXFxhc2stYXJvdW5kLW1lXFxmcm9udGVuZFxcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7Ci8vCi8vCi8vCi8vCmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCc7CnZhciBtcXR0Q2xpZW50OwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0lvVCcsCiAgY29tcHV0ZWQ6IF9vYmplY3RTcHJlYWQoe30sIG1hcFN0YXRlKHsKICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmluaXRpYWxpemVkOwogICAgfSwKICAgIGhhc2g6IGZ1bmN0aW9uIGhhc2goc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmhhc2hLZXk7CiAgICB9CiAgfSkpLAogIHdhdGNoOiB7CiAgICAvLyBUaGUgZWZmZWN0IG9mIHRoaXMgaXMgdG8gd2FpdCB1bnRpbCB0aGUgdXNlciBpcyBsb2dnZWQKICAgIC8vIGluIGJlZm9yZSBtYWtpbmcgdGhlIHdlYnNvY2tldCBjb25uZWN0aW9uLgogICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHsKICAgICAgaWYgKHRoaXMuaW5pdCkgewogICAgICAgIHRoaXMubW91bnRJT1QoKTsKICAgICAgICBjb25zb2xlLmxvZygnTW91bnRpbmcgd2Vic29ja2V0Jyk7CiAgICAgIH0KICAgIH0sCiAgICBoYXNoOiBmdW5jdGlvbiBoYXNoKCkgewogICAgICBjb25zb2xlLmxvZygnSW9UIHN1YnNjcmliaW5nIHRvICcsIHRoaXMuaGFzaCk7CiAgICAgIHRoaXMuc3Vic2NyaWJlKHRoaXMuaGFzaCk7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZSh0b3BpYykgewogICAgICBjb25zb2xlLmxvZygnSW9UIHN1YmNyaWJpbmcgdG8gJywgdG9waWMpOwogICAgICBtcXR0Q2xpZW50LnN1YnNjcmliZSh0b3BpYyk7CiAgICB9LAogICAgbW91bnRJT1Q6IGZ1bmN0aW9uIG1vdW50SU9UKCkgewogICAgICB2YXIgX3N0b3JlID0gdGhpcy4kc3RvcmU7CgogICAgICB2YXIgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpOwoKICAgICAgdmFyIEFXU0lvVERhdGEgPSByZXF1aXJlKCdhd3MtaW90LWRldmljZS1zZGsnKTsKCiAgICAgIHZhciBlcnJvckNvdW50ID0gMDsKICAgICAgdmFyIEFXU0NvbmZpZ3VyYXRpb24gPSB7CiAgICAgICAgcG9vbElkOiB0aGlzLiRwb29sSWQsCiAgICAgICAgLy8ndXMtZWFzdC0xOmU0ODAzZDNiLTQyZDUtNDk2Zi05YzVhLTQwOGYyMGViMjhlNCcsIC8vICdZb3VyQ29nbml0b0lkZW50aXR5UG9vbElkJwogICAgICAgIGhvc3Q6IHRoaXMuJGhvc3QsCiAgICAgICAgLy8gJ1lvdXJBd3NJb1RFbmRwb2ludCcsIGUuZy4gJ3ByZWZpeC5pb3QudXMtZWFzdC0xLmFtYXpvbmF3cy5jb20nCiAgICAgICAgcmVnaW9uOiB0aGlzLiRyZWdpb24gLy8gJ1lvdXJBd3NSZWdpb24nLCBlLmcuICd1cy1lYXN0LTEnCgogICAgICB9OwogICAgICB2YXIgY3VycmVudGx5U3Vic2NyaWJlZFRvcGljID0gJ25ldy1hbnN3ZXInOwogICAgICB2YXIgY2xpZW50SWQgPSAnYXNrQXJvdW5kTWUtJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMCArIDEpOwogICAgICBBV1MuY29uZmlnLnJlZ2lvbiA9IEFXU0NvbmZpZ3VyYXRpb24ucmVnaW9uOwogICAgICBBV1MuY29uZmlnLmNyZWRlbnRpYWxzID0gbmV3IEFXUy5Db2duaXRvSWRlbnRpdHlDcmVkZW50aWFscyh7CiAgICAgICAgSWRlbnRpdHlQb29sSWQ6IEFXU0NvbmZpZ3VyYXRpb24ucG9vbElkCiAgICAgIH0pOwogICAgICBjb25zb2xlLmxvZygnSW9UIGNyZWF0ZWQnKTsKICAgICAgbXF0dENsaWVudCA9IEFXU0lvVERhdGEuZGV2aWNlKHsKICAgICAgICByZWdpb246IEFXUy5jb25maWcucmVnaW9uLAogICAgICAgIGhvc3Q6IEFXU0NvbmZpZ3VyYXRpb24uaG9zdCwKICAgICAgICBjbGllbnRJZDogY2xpZW50SWQsCiAgICAgICAgcHJvdG9jb2w6ICd3c3MnLAogICAgICAgIG1heGltdW1SZWNvbm5lY3RUaW1lTXM6IDgwMDAsCiAgICAgICAgZGVidWc6IGZhbHNlLAogICAgICAgIGFjY2Vzc0tleUlkOiAnJywKICAgICAgICBzZWNyZXRLZXk6ICcnLAogICAgICAgIHNlc3Npb25Ub2tlbjogJycKICAgICAgfSk7CiAgICAgIHZhciBjb2duaXRvSWRlbnRpdHkgPSBuZXcgQVdTLkNvZ25pdG9JZGVudGl0eSgpOwoKICAgICAgdmFyIGdldENyZWRzID0gZnVuY3Rpb24gZ2V0Q3JlZHMoKSB7CiAgICAgICAgQVdTLmNvbmZpZy5jcmVkZW50aWFscy5nZXQoZnVuY3Rpb24gKGVyciwgZGF0YSkgewogICAgICAgICAgaWYgKCFlcnIpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ3JldHJpZXZlZCBpZGVudGl0eTogJyArIEFXUy5jb25maWcuY3JlZGVudGlhbHMuaWRlbnRpdHlJZCwgZGF0YSk7CiAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7CiAgICAgICAgICAgICAgSWRlbnRpdHlJZDogQVdTLmNvbmZpZy5jcmVkZW50aWFscy5pZGVudGl0eUlkCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGNvZ25pdG9JZGVudGl0eS5nZXRDcmVkZW50aWFsc0ZvcklkZW50aXR5KHBhcmFtcywgZnVuY3Rpb24gKGVyciwgZGF0YSkgewogICAgICAgICAgICAgIGlmICghZXJyKSB7CiAgICAgICAgICAgICAgICBtcXR0Q2xpZW50LnVwZGF0ZVdlYlNvY2tldENyZWRlbnRpYWxzKGRhdGEuQ3JlZGVudGlhbHMuQWNjZXNzS2V5SWQsIGRhdGEuQ3JlZGVudGlhbHMuU2VjcmV0S2V5LCBkYXRhLkNyZWRlbnRpYWxzLlNlc3Npb25Ub2tlbik7CiAgICAgICAgICAgICAgfSBlbHNlIHsvLyBjb25zb2xlLmxvZygnZXJyb3IgcmV0cmlldmluZyBjcmVkZW50aWFsczogJyArIGVycikKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSBlbHNlIHsvLyBjb25zb2xlLmxvZygnZXJyb3IgcmV0cmlldmluZyBpZGVudGl0eTonICsgZXJyKQogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9OwoKICAgICAgbXF0dENsaWVudC5vbignY29ubmVjdCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICBjb25zb2xlLmxvZygnbXF0dENsaWVudCBjb25uZWN0ZWQnKTsKICAgICAgICBtcXR0Q2xpZW50LnN1YnNjcmliZShjdXJyZW50bHlTdWJzY3JpYmVkVG9waWMpOwogICAgICB9KTsKICAgICAgbXF0dENsaWVudC5vbignZXJyb3InLCBmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgaWYgKGVycm9yQ291bnQgPiAwKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnbXF0dENsaWVudCBlcnJvcjonLCBlcnIpOwogICAgICAgIH0KCiAgICAgICAgZXJyb3JDb3VudCsrOwogICAgICAgIGdldENyZWRzKCk7CiAgICAgIH0pOwogICAgICBtcXR0Q2xpZW50Lm9uKCdtZXNzYWdlJywgZnVuY3Rpb24gKHRvcGljLCBwYXlsb2FkKSB7CiAgICAgICAgdmFyIG1zZyA9IEpTT04ucGFyc2UocGF5bG9hZC50b1N0cmluZygpKTsKICAgICAgICBjb25zb2xlLmxvZygnSW9UIG1zZzogJywgdG9waWMsIG1zZyk7CgogICAgICAgIGlmICh0b3BpYyA9PT0gJ25ldy1hbnN3ZXInKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygndXBkYXRlJyk7CgogICAgICAgICAgX3N0b3JlLmNvbW1pdCgndXBkYXRlUXVlc3Rpb24nLCBtc2cpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zb2xlLmxvZygnTmV3IHF1ZXN0aW9uJyk7CgogICAgICAgICAgX3N0b3JlLmNvbW1pdCgnc2F2ZVF1ZXN0aW9uJywgbXNnKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0KfTs="},{"version":3,"sources":["IoT.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div></div>\r\n</template>\r\n\r\n<script>\r\n  import { mapState } from 'vuex'\r\n  let mqttClient\r\n\r\n  export default {\r\n    name: 'IoT',\r\n    computed: {\r\n      ...mapState({\r\n        init: (state) => state.initialized,\r\n        hash: (state) => state.hashKey\r\n      })\r\n    },\r\n    watch: {\r\n      // The effect of this is to wait until the user is logged\r\n      // in before making the websocket connection.\r\n      init: function () {\r\n        if (this.init) {\r\n          this.mountIOT()\r\n          console.log('Mounting websocket')\r\n        }\r\n      },\r\n      hash: function() {\r\n        console.log('IoT subscribing to ', this.hash)\r\n        this.subscribe(this.hash)\r\n      }\r\n    },\r\n    methods: {\r\n      subscribe (topic) {\r\n        console.log('IoT subcribing to ', topic)\r\n        mqttClient.subscribe(topic)\r\n      },\r\n      mountIOT () {\r\n        let _store = this.$store\r\n\r\n        const AWS = require('aws-sdk')\r\n        const AWSIoTData = require('aws-iot-device-sdk')\r\n        let errorCount = 0\r\n\r\n        const AWSConfiguration = {\r\n          poolId: this.$poolId, //'us-east-1:e4803d3b-42d5-496f-9c5a-408f20eb28e4', // 'YourCognitoIdentityPoolId'\r\n          host: this.$host, // 'YourAwsIoTEndpoint', e.g. 'prefix.iot.us-east-1.amazonaws.com'\r\n          region: this.$region // 'YourAwsRegion', e.g. 'us-east-1'\r\n        }\r\n\r\n        var currentlySubscribedTopic = 'new-answer'\r\n        var clientId = 'askAroundMe-' + (Math.floor((Math.random() * 100000) + 1))\r\n        AWS.config.region = AWSConfiguration.region\r\n\r\n        AWS.config.credentials = new AWS.CognitoIdentityCredentials({\r\n          IdentityPoolId: AWSConfiguration.poolId\r\n        })\r\n\r\n        console.log('IoT created')\r\n        mqttClient = AWSIoTData.device({\r\n          region: AWS.config.region,\r\n          host: AWSConfiguration.host,\r\n          clientId: clientId,\r\n          protocol: 'wss',\r\n          maximumReconnectTimeMs: 8000,\r\n          debug: false,\r\n          accessKeyId: '',\r\n          secretKey: '',\r\n          sessionToken: ''\r\n        })\r\n\r\n        const cognitoIdentity = new AWS.CognitoIdentity()\r\n        const getCreds = function () {\r\n          AWS.config.credentials.get(function (err, data) {\r\n            if (!err) {\r\n              console.log('retrieved identity: ' + AWS.config.credentials.identityId, data)\r\n              const params = {\r\n                IdentityId: AWS.config.credentials.identityId\r\n              }\r\n              cognitoIdentity.getCredentialsForIdentity(params, function (err, data) {\r\n                if (!err) {\r\n                  mqttClient.updateWebSocketCredentials(data.Credentials.AccessKeyId,\r\n                    data.Credentials.SecretKey,\r\n                    data.Credentials.SessionToken)\r\n                } else {\r\n                  // console.log('error retrieving credentials: ' + err)\r\n                }\r\n              })\r\n            } else {\r\n              // console.log('error retrieving identity:' + err)\r\n            }\r\n          })\r\n        }\r\n\r\n        mqttClient.on('connect', function () {\r\n          console.log('mqttClient connected')\r\n          mqttClient.subscribe(currentlySubscribedTopic)\r\n        })\r\n\r\n        mqttClient.on('error', function (err) {\r\n          if (errorCount > 0) {\r\n            console.log('mqttClient error:', err)\r\n          }\r\n          errorCount++\r\n          getCreds()\r\n        })\r\n\r\n        mqttClient.on('message', function (topic, payload) {\r\n          const msg = JSON.parse(payload.toString())\r\n          console.log('IoT msg: ', topic, msg)\r\n          if (topic === 'new-answer') {\r\n            console.log('update')\r\n            _store.commit('updateQuestion', msg)\r\n          } else {\r\n            console.log('New question')\r\n            _store.commit('saveQuestion', msg)\r\n          }\r\n        })\r\n      }\r\n    }\r\n  }\r\n</script>"],"sourceRoot":"src/components"}]}