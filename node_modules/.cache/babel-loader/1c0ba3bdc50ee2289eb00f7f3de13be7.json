{"remainingRequest":"C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\vuetify-loader\\lib\\loader.js??ref--18-0!C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\src\\views\\Answers.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\src\\views\\Answers.vue","mtime":1607093321483},{"path":"C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kprut\\Desktop\\ask-around-me\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiQzpcXFVzZXJzXFxrcHJ1dFxcRGVza3RvcFxcYXNrLWFyb3VuZC1tZVxcZnJvbnRlbmRcXG5vZGVfbW9kdWxlc1xcQGJhYmVsXFxydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgYXhpb3MgZnJvbSAiYXhpb3MiOwoKdmFyIGdlb2hhc2ggPSByZXF1aXJlKCduZ2VvaGFzaCcpOwoKdmFyIGlnbm9yZSA9IFsnYW5zd2VycycsICd0b3RhbFNjb3JlJywgJ2dlb2hhc2gnLCAncXVlc3Rpb24nLCAnZ2VvSnNvbicsICdoYXNoS2V5JywgJ2NyZWF0ZWQnLCAncmFuZ2VLZXknLCAndHlwZScsICdzdGF0ZScsICdhdXRob3InXTsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJBbnN3ZXJzIiwKICBjb21wb25lbnRzOiB7fSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgY3VycmVudExhdDogNDAuNzM1ODIzNSwKICAgICAgcGFyZW50SGVpZ2h0OiA2MDAsCiAgICAgIGN1cnJlbnRMbmc6IC03My45OTI3MTAyLAogICAgICBsb2FkaW5nOiB0cnVlLAogICAgICBoazogbnVsbCwKICAgICAgcms6IG51bGwsCiAgICAgIGJsb2NrczogW10KICAgIH07CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ21vdW50ZWQnKTsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhfdGhpcy4kcm91dGUucXVlcnkpOwogICAgICAgICAgICAgIF90aGlzLmhrID0gX3RoaXMuJHJvdXRlLnF1ZXJ5LmhrOwogICAgICAgICAgICAgIF90aGlzLnJrID0gX3RoaXMuJHJvdXRlLnF1ZXJ5LnJrOwogICAgICAgICAgICAgIF90aGlzLnBhcmVudEhlaWdodCA9IF90aGlzLiRwYXJlbnQuJGVsLm9mZnNldEhlaWdodDsKCiAgICAgICAgICAgICAgaWYgKCEoX3RoaXMuaGsgJiYgX3RoaXMucmspKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7CiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmxvYWRBbnN3ZXJzKCk7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBsb2FkQW5zd2VyczogZnVuY3Rpb24gbG9hZEFuc3dlcnMoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIHVybCwgdG9rZW4sIF95aWVsZCRheGlvcyRnZXQsIGRhdGEsIHF1ZXN0aW9uTG9jLCB0b3RhbFZvdGVzLCBoYXNoLCBnZXRDb2xvciwgX2hhc2gsIF9oYXNoMiwgY29vcmRzOwoKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgZ2V0Q29sb3IgPSBmdW5jdGlvbiBfZ2V0Q29sb3IodmFsdWUpIHsKICAgICAgICAgICAgICAgICAgdmFyIGh1ZSA9ICgxIC0gdmFsdWUpICogMjQwOwogICAgICAgICAgICAgICAgICByZXR1cm4gImhzbCgiLmNvbmNhdChodWUsICIsMTAwJSw1MCUpIik7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdsb2FkQW5zd2VycyBjYWxsZWQnKTsKICAgICAgICAgICAgICAgIHVybCA9ICIiLmNvbmNhdChfdGhpczIuJEFQSXVybCwgIi9nZW9RdWVzdGlvbj9oaz0iKS5jb25jYXQoX3RoaXMyLmhrLCAiJnJrPSIpLmNvbmNhdChfdGhpczIucmspOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1OwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi4kYXV0aC5nZXRUb2tlblNpbGVudGx5KCk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIHRva2VuID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVVJMOiAnLCB1cmwpOwogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA5OwogICAgICAgICAgICAgICAgcmV0dXJuIGF4aW9zLmdldCh1cmwsIHsKICAgICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAgIEF1dGhvcml6YXRpb246ICJCZWFyZXIgIi5jb25jYXQodG9rZW4pIC8vIHNlbmQgdGhlIGFjY2VzcyB0b2tlbiB0aHJvdWdoIHRoZSAnQXV0aG9yaXphdGlvbicgaGVhZGVyCgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgX3lpZWxkJGF4aW9zJGdldCA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgZGF0YSA9IF95aWVsZCRheGlvcyRnZXQuZGF0YTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZXNwb25zZTogJywgZGF0YSk7CiAgICAgICAgICAgICAgICBxdWVzdGlvbkxvYyA9IEpTT04ucGFyc2UoZGF0YS5nZW9Kc29uLlMpLmNvb3JkaW5hdGVzOwogICAgICAgICAgICAgICAgX3RoaXMyLmN1cnJlbnRMbmcgPSBxdWVzdGlvbkxvY1swXTsKICAgICAgICAgICAgICAgIF90aGlzMi5jdXJyZW50TGF0ID0gcXVlc3Rpb25Mb2NbMV07IC8vIFJlbW92ZSBub24taGFzaCBhdHRyaWJzIGZyb20gcmVzcG9uc2UKCiAgICAgICAgICAgICAgICBpZ25vcmUubWFwKGZ1bmN0aW9uIChhdHRyaWIpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZSBkYXRhW2F0dHJpYl07CiAgICAgICAgICAgICAgICB9KTsgLy8gR2V0IHRvdGFsVm90ZXMKCiAgICAgICAgICAgICAgICB0b3RhbFZvdGVzID0gMDsKCiAgICAgICAgICAgICAgICBmb3IgKGhhc2ggaW4gZGF0YSkgewogICAgICAgICAgICAgICAgICB0b3RhbFZvdGVzICs9IHBhcnNlSW50KGRhdGFbaGFzaF0uTik7CiAgICAgICAgICAgICAgICB9IC8vIFJldHVybnMgZ3JhZGllbnQgZm9yIHZhbHVlIG9mIDAtMQoKCiAgICAgICAgICAgICAgICAvLyBTZXQgY29sb3IKICAgICAgICAgICAgICAgIGZvciAoX2hhc2ggaW4gZGF0YSkgewogICAgICAgICAgICAgICAgICBkYXRhW19oYXNoXS5wZXJjZW50ID0gZGF0YVtfaGFzaF0uTiAvIHRvdGFsVm90ZXM7IC8vIGNvbnNvbGUubG9nKGRhdGFbaGFzaF0uTiwgdG90YWxWb3RlcykKCiAgICAgICAgICAgICAgICAgIGRhdGFbX2hhc2hdLmNvbG9yID0gZ2V0Q29sb3IoZGF0YVtfaGFzaF0ucGVyY2VudCk7CiAgICAgICAgICAgICAgICB9IC8vIEdldCBnZW9oYXNoZXMKCgogICAgICAgICAgICAgICAgZm9yIChfaGFzaDIgaW4gZGF0YSkgewogICAgICAgICAgICAgICAgICBjb29yZHMgPSBnZW9oYXNoLmRlY29kZV9iYm94KF9oYXNoMik7IC8vIE1hcHMgYm91bmRzIGxvZ2ljOiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9tYXBzL2RvY3VtZW50YXRpb24vamF2YXNjcmlwdC9yZWZlcmVuY2UvY29vcmRpbmF0ZXMjTGF0TG5nQm91bmRzTGl0ZXJhbAoKICAgICAgICAgICAgICAgICAgX3RoaXMyLmJsb2Nrcy5wdXNoKHsKICAgICAgICAgICAgICAgICAgICBub3J0aDogY29vcmRzWzBdLAogICAgICAgICAgICAgICAgICAgIHNvdXRoOiBjb29yZHNbMl0sCiAgICAgICAgICAgICAgICAgICAgZWFzdDogY29vcmRzWzNdLAogICAgICAgICAgICAgICAgICAgIHdlc3Q6IGNvb3Jkc1sxXSwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogZGF0YVtfaGFzaDJdLmNvbG9yLAogICAgICAgICAgICAgICAgICAgIHBjdDogZGF0YVtfaGFzaDJdLnBlcmNlbnQsCiAgICAgICAgICAgICAgICAgICAgY2VudGVyOiB7CiAgICAgICAgICAgICAgICAgICAgICBsYXQ6IChjb29yZHNbMF0gKyBjb29yZHNbMl0pIC8gMiwKICAgICAgICAgICAgICAgICAgICAgIGxuZzogKGNvb3Jkc1sxXSArIGNvb3Jkc1szXSkgLyAyCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0gLy8gY29uc29sZS5sb2coZGF0YSkKCgogICAgICAgICAgICAgICAgX3RoaXMyLmxvYWRpbmcgPSBmYWxzZTsKCiAgICAgICAgICAgICAgY2FzZSAyMToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKSgpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["Answers.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n\r\n  <v-container class=\"pa-0 ma-0\">\r\n\r\n    <!-- Loading spinner -->\r\n    <v-container v-if=\"loading\" >\r\n      <div class=\"text-center\">\r\n        <v-progress-circular\r\n          :size=\"50\"\r\n          color=\"orange\"\r\n          indeterminate\r\n        ></v-progress-circular>        \r\n      </div>  \r\n    </v-container>\r\n\r\n    <!-- Questions list for authenticated users -->\r\n    <v-container class=\"pa-0 ma-0\" id=\"answersMap\" v-if=\"!loading\">\r\n\r\n      <GmapMap\r\n          :center=\"{lat:this.currentLat, lng:this.currentLng}\"\r\n          :zoom=\"7\"\r\n          map-type-id=\"roadmap\"\r\n          style=\"width: 100%; height: 80vh;\"\r\n          :options=\"{\r\n            zoomControl: true,\r\n            zoom: 11,\r\n            mapTypeControl: false,\r\n            scaleControl: false,\r\n            streetViewControl: false,\r\n            rotateControl: false,\r\n            fullscreenControl: false,\r\n            disableDefaultUI: false\r\n          }\"\r\n        > \r\n          <!-- <GmapRectangle \r\n            :key=\"index\"\r\n            v-for=\"(m, index) in blocks\"\r\n            :bounds=\"{north: m.north, south: m.south, east: m.east, west: m.west}\"\r\n            :options=\"{\r\n              fillColor: m.color,\r\n              fillOpacity: .6,\r\n              strokeColor: m.color,\r\n              strokeOpacity: .1,\r\n              strokeWeight: 1\r\n            }\"            \r\n          /> -->\r\n          <GmapCircle\r\n            :key=\"index\"\r\n            v-for=\"(m, index) in blocks\"\r\n            :center=\"{lat: m.center.lat, lng: m.center.lng}\"\r\n            :radius=\"(250+(1500*m.pct))\"\r\n            :options=\"{\r\n              fillColor: m.color,\r\n              fillOpacity: 0.8,\r\n              strokeColor: m.color,\r\n              strokeOpacity: 0.8,\r\n              strokeWeight: 2\r\n            }\"\r\n          />          \r\n          <GmapCircle\r\n            :center=\"{lat: currentLat, lng: currentLng}\"\r\n            :radius=\"8000\"\r\n            :options=\"{\r\n              fillColor:'blue',\r\n              fillOpacity:0.1,\r\n              strokeColor: '#0000FF',\r\n              strokeOpacity: 0.2,\r\n              strokeWeight: 5\r\n            }\"\r\n          />\r\n        </GmapMap>     \r\n\r\n    </v-container>\r\n\r\n    <!-- Back icon -->\r\n    <v-container class=\"pa-0 ma-0\">\r\n      <v-btn \r\n        v-if=\"$auth.isAuthenticated\" \r\n        fixed\r\n        dark\r\n        fab\r\n        bottom\r\n        right\r\n        color=\"gray\"\r\n        class=\"mb-4\"\r\n        to=\"/\">\r\n        <v-icon>arrow_back</v-icon>\r\n      </v-btn>\r\n    </v-container>    \r\n\r\n  </v-container>\r\n</template>\r\n\r\n<script>\r\n  import axios from \"axios\"\r\n  const geohash = require('ngeohash')\r\n  const ignore = ['answers','totalScore','geohash','question','geoJson','hashKey','created','rangeKey','type','state','author']\r\n\r\n  export default {\r\n    name: \"Answers\",\r\n    components: {\r\n    },\r\n    data: function () {   \r\n      return {\r\n        currentLat: 40.7358235,\r\n        parentHeight: 600,\r\n        currentLng: -73.9927102,\r\n        loading: true,        \r\n        hk: null,\r\n        rk: null,\r\n        blocks:[]\r\n      }\r\n    },\r\n    async mounted () {\r\n      console.log('mounted')\r\n      console.log(this.$route.query)\r\n      this.hk = this.$route.query.hk\r\n      this.rk = this.$route.query.rk\r\n      this.parentHeight = this.$parent.$el.offsetHeight;      \r\n      if (this.hk && this.rk) await this.loadAnswers()\r\n      \r\n    },\r\n    methods: {\r\n      async loadAnswers() {\r\n        console.log('loadAnswers called')\r\n\r\n        const url = `${this.$APIurl}/geoQuestion?hk=${this.hk}&rk=${this.rk}`\r\n        const token = await this.$auth.getTokenSilently();\r\n        console.log('URL: ', url)\r\n        const { data } = await axios.get(url, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`    // send the access token through the 'Authorization' header\r\n          }\r\n        })\r\n        console.log('Response: ', data)\r\n\r\n        const questionLoc = (JSON.parse(data.geoJson.S)).coordinates\r\n        this.currentLng = questionLoc[0]\r\n        this.currentLat = questionLoc[1]\r\n\r\n        // Remove non-hash attribs from response\r\n        ignore.map((attrib) => delete data[attrib])\r\n\r\n        // Get totalVotes\r\n        let totalVotes = 0\r\n        for (let hash in data) {\r\n          totalVotes += parseInt(data[hash].N)\r\n        }\r\n\r\n        // Returns gradient for value of 0-1\r\n        function getColor(value){\r\n          let hue=((1-value)*240)\r\n          return `hsl(${hue},100%,50%)`\r\n        }\r\n\r\n        // Set color\r\n        for (let hash in data) {\r\n          data[hash].percent = data[hash].N / totalVotes\r\n          // console.log(data[hash].N, totalVotes)\r\n          data[hash].color = getColor(data[hash].percent)\r\n        }\r\n\r\n        // Get geohashes\r\n        for (let hash in data) {\r\n          const coords = geohash.decode_bbox(hash)\r\n\r\n          // Maps bounds logic: https://developers.google.com/maps/documentation/javascript/reference/coordinates#LatLngBoundsLiteral\r\n          this.blocks.push({\r\n            north: coords[0],\r\n            south: coords [2],\r\n            east: coords[3],\r\n            west: coords[1],\r\n            color: data[hash].color,\r\n            pct: data[hash].percent,\r\n            center: {\r\n              lat: (coords[0]+coords[2])/2,\r\n              lng: (coords[1]+coords[3])/2\r\n            }\r\n          })\r\n        }\r\n          // console.log(data)\r\n\r\n        this.loading = false\r\n      }\r\n\r\n    }\r\n  }\r\n</script>\r\n"],"sourceRoot":"src/views"}]}